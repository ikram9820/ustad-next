// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profession {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(255) @unique
  gigs  Gig[]
}

model Gig {
  id           String     @id @default(cuid())
  title        String     @db.VarChar(255)
  description  String     @db.Text
  rate         Float
  range        Float
  created_at   DateTime   @default(now())
  is_active    Boolean    @default(true)
  job_type     JobType    @default(FIX)
  professionId Int
  profession   Profession @relation(fields: [professionId], references: [id])
  userId       String     @db.VarChar(255)
  user         User       @relation(fields: [userId], references: [id])
  orders       Order[]
}

enum JobType {
  FIX
  HOURLY
  DAILY
  MONTHLY
}

// model Location {
//   id Int @id @default(autoincrement())
//   x Decimal @default(0.0)
//   y Decimal @default(0.0)
// }

model Order {
  id        Int         @id @default(autoincrement())
  startedAt DateTime    @default(now())
  endAt     DateTime
  rate      Decimal
  job_type  JobType     @default(HOURLY)
  status    OrderStatus @default(PENDING)
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  gigId     String
  gigUser   Gig         @relation(fields: [gigId], references: [id])
}

enum OrderStatus {
  PENDING //ONLY 3 AT A TIME
  IN_PROGRESS
  COMPLETE
}

// model Review {
//   id Int @id @default(autoincrement())
//   rating Int
//   review String @db.Text
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  gigs          Gig[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
